/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.io.*; 
import java.net.*; 
import java.util.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Joshua
 */
public class ServerUI extends javax.swing.JFrame {

    /**
     * Creates new form ServerUI
     */
    public ServerUI() {
        initComponents();
        
        Combo_Protocol.removeAllItems();
        Combo_Protocol.addItem("UDP");
        Combo_Protocol.addItem("TCP");
        
        try {
            TextField_HostIP.setText(InetAddress.getLocalHost().getHostAddress());
        } catch (UnknownHostException ex) {
            Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        TextField_HostPort.setText("1080");
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        Button_Start = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TextField_HostIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        TextField_HostPort = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea_Responses = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Combo_Protocol = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Client");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Server");

        Button_Start.setText("Start Server");
        Button_Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_StartActionPerformed(evt);
            }
        });

        jLabel2.setText("Hosts IP Address");

        TextField_HostIP.setEditable(false);
        TextField_HostIP.setToolTipText("Please input reciever's IP address");
        TextField_HostIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField_HostIPActionPerformed(evt);
            }
        });

        jLabel1.setText("Host's Port");

        TextField_HostPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField_HostPortActionPerformed(evt);
            }
        });

        TextArea_Responses.setColumns(20);
        TextArea_Responses.setRows(5);
        jScrollPane1.setViewportView(TextArea_Responses);

        jLabel3.setText("Server Console");

        jLabel6.setText("Server Protocol");

        Combo_Protocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Combo_Protocol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Combo_ProtocolActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TextField_HostIP, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(TextField_HostPort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(Button_Start)
                    .addComponent(jLabel6)
                    .addComponent(Combo_Protocol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(TextField_HostIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextField_HostPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Combo_Protocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Button_Start)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Main", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Advanced Controls", jPanel2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextField_HostIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField_HostIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField_HostIPActionPerformed

    private void TextField_HostPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField_HostPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField_HostPortActionPerformed

    private void Button_StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_StartActionPerformed
        // TODO add your handling code here:
        TextArea_Responses.setText("");
        
        boolean run = true;
        TextArea_Responses.append("1: Server Initialized\n");
        System.out.println("System print");
        
        
        
        if(TextField_HostPort.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter a value for the Host's Port Number.");
        }
        else if(Combo_Protocol.getSelectedItem().toString().equals("TCP"))
        {
            TextArea_Responses.append("TCP\n");
        }
        else if(Combo_Protocol.getSelectedItem().toString().equals("UDP"))
        {
            try 
            {
                TextArea_Responses.append("2: UDP was selected as the Server's Protocol.\n");
                
                portNum = Integer.parseInt(TextField_HostPort.getText());
                
                
                DatagramSocket socket = new DatagramSocket(portNum);
                TextArea_Responses.append("3: Server was started on Port: "+portNum+".\n");
                TextArea_Responses.update(TextArea_Responses.getGraphics());
                
                int lineCounter = 3;
                while(continueLooping)
                {
                    lineCounter++;
                    TextArea_Responses.append(lineCounter+": Waiting for Packet\n");
                    TextArea_Responses.update(TextArea_Responses.getGraphics());
                    
                    DatagramPacket request = new DatagramPacket(new byte[1024],1024);
                    socket.receive(request);
                    
                    lineCounter++;
                    TextArea_Responses.append(lineCounter+": "+printData(request));
                    lineCounter++;
                    TextArea_Responses.append(lineCounter+": Packet Recieved\n");
                    TextArea_Responses.update(TextArea_Responses.getGraphics());
                    
                    DatagramPacket reply = new DatagramPacket(request.getData(), request.getData().length, request.getAddress(), request.getPort());
                    socket.send(reply);
                    
                    if(printData(request).contains("STOP"))
                    {
                        continueLooping = false;
                    }
                }
                
                continueLooping = true;
                socket.close();
            }
            catch (SocketException ex) 
            {
                Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
            } 
            catch (Exception ex) 
            {
                Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
   
            /*
            while(continueLooping)
            {
            System.out.println("System print");
            TextArea_Responses.append("hello\n");
            TextArea_Responses.update(TextArea_Responses.getGraphics());
            try {
            Thread.sleep(1000);
            } catch (InterruptedException ex) {
            Logger.getLogger(ServerUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
             */ 
            
            
        }
    }//GEN-LAST:event_Button_StartActionPerformed

    private void Combo_ProtocolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Combo_ProtocolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Combo_ProtocolActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerUI().setVisible(true);
            }
        });
    }
    
    private static String printData(DatagramPacket request) throws Exception 
    { 
	// Obtain references to the packet's array of bytes. 
	byte[] buf = request.getData(); 
	
	// Wrap the bytes in a byte array input stream, 
	// so that you can read the data as a stream of bytes. 
	ByteArrayInputStream bais = new ByteArrayInputStream(buf); 
	
	// Wrap the byte array output stream in an input stream reader, 
	// so you can read the data as a stream of characters. 
	InputStreamReader isr = new InputStreamReader(bais); 
	
	// Wrap the input stream reader in a bufferred reader, 
	// so you can read the character data a line at a time. 
	// (A line is a sequence of chars terminated by any combination of \r and \n.) 
	BufferedReader br = new BufferedReader(isr); 
	
	// The message data is contained in a single line, so read this line. 
	String line = br.readLine(); 
	
	// Print host address and data received from it. 
	return (line + "\n"); 

    } 
    //Custom Variables
    private boolean continueLooping = true;
    int portNum;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Start;
    private javax.swing.JComboBox Combo_Protocol;
    private javax.swing.JTextArea TextArea_Responses;
    private javax.swing.JTextField TextField_HostIP;
    private javax.swing.JTextField TextField_HostPort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
