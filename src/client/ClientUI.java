/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.io.*; 
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.*; 
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joshua
 */
public class ClientUI extends javax.swing.JFrame {

    /**
     * Creates new form ClientUI
     * @throws java.net.UnknownHostException
     */
    
    DefaultTableModel model;
            
    public ClientUI() {
        model = new DefaultTableModel()
        {
            @Override
            public boolean isCellEditable(int row, int column) 
            {
                return false;
            }
        };
        
        initComponents();
        Combo_ClientProtocol.removeAllItems();
        Combo_ClientProtocol.addItem("UDP");
        Combo_ClientProtocol.addItem("TCP");
 
        Table_PacketInfo.setModel(model);
        
        model.addColumn("Packet Num");
        model.addColumn("Time Sent");
        model.addColumn("Time Ret");
        model.addColumn("Time Dif");
        Table_PacketInfo.getTableHeader().setReorderingAllowed(false);
        
      
        try 
        {
            ipAddress = InetAddress.getLocalHost().getHostAddress();
        } 
        catch (UnknownHostException ex) 
        {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        Label_IPAddress.setText(ipAddress);
        TextField_ServerIP.setText(ipAddress);
        TextField_ServerPort.setText("1080");
        
        numberOfSentPackets = Integer.parseInt(TextField_NumberOfSentPackets.getText());
        TimeBetweenPackets = Integer.parseInt(TextField_TimeBetweenPackets.getText());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Label_IPAddress = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        TextField_ServerIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        TextField_ServerPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea_Replies = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        Button_SendData = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        Combo_ClientProtocol = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        TextField_TimeBetweenPackets = new javax.swing.JTextField();
        TextField_NumberOfSentPackets = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TextField_Timeout = new javax.swing.JTextField();
        Check_WaitToConfirm = new javax.swing.JCheckBox();
        Check_WaitToConfirm.setSelected(true);
        Check_SendStop = new javax.swing.JCheckBox();
        Check_SendStop.setSelected(true);
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_PacketInfo = new javax.swing.JTable(model);
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        TextField_Throughput = new javax.swing.JTextField();
        TextField_Latency = new javax.swing.JTextField();
        TextField_Errors = new javax.swing.JTextField();
        TextField_Jitter = new javax.swing.JTextField();
        TextField_OOOAmount = new javax.swing.JTextField();
        TextField_DroppedPackets = new javax.swing.JTextField();
        Button_Calculate = new javax.swing.JButton();
        TextField_PercentDropped = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 440));
        setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Client");

        Label_IPAddress.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Label_IPAddress.setToolTipText("The host machine's IP address");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Host's IP:");
        jLabel5.setFocusable(false);
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        TextField_ServerIP.setToolTipText("Please input reciever's IP address");
        TextField_ServerIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField_ServerIPActionPerformed(evt);
            }
        });

        jLabel1.setText("Server's Port");

        TextField_ServerPort.setToolTipText("This should be the same as the port set in the Server application");
        TextField_ServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField_ServerPortActionPerformed(evt);
            }
        });

        jLabel2.setText("Server's IP Address");

        TextArea_Replies.setEditable(false);
        TextArea_Replies.setColumns(20);
        TextArea_Replies.setRows(5);
        TextArea_Replies.setToolTipText("This area shows server replies");
        TextArea_Replies.setFocusable(false);
        jScrollPane1.setViewportView(TextArea_Replies);

        jLabel4.setText("Server Replies");

        Button_SendData.setText("Send Data");
        Button_SendData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_SendDataActionPerformed(evt);
            }
        });

        jLabel6.setText("Client's Protocol");

        Combo_ClientProtocol.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(TextField_ServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextField_ServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(Button_SendData)
                    .addComponent(jLabel6)
                    .addComponent(Combo_ClientProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(TextField_ServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextField_ServerPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Combo_ClientProtocol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Button_SendData))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Main", jPanel1);

        jLabel7.setText("Time Between Packets (ms)");

        TextField_TimeBetweenPackets.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextField_TimeBetweenPackets.setText("10");

        TextField_NumberOfSentPackets.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextField_NumberOfSentPackets.setText("10");
        TextField_NumberOfSentPackets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField_NumberOfSentPacketsActionPerformed(evt);
            }
        });

        jLabel8.setText("Number of Packets Sent");

        jLabel9.setText("Socket Timeout (ms)");

        TextField_Timeout.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        TextField_Timeout.setText("100");

        Check_WaitToConfirm.setText("Wait for confirm before sending?");
        Check_WaitToConfirm.setContentAreaFilled(false);
        Check_WaitToConfirm.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Check_WaitToConfirm.setEnabled(false);
        Check_WaitToConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Check_WaitToConfirmActionPerformed(evt);
            }
        });

        Check_SendStop.setText("Send Stop Packet");
        Check_SendStop.setToolTipText("When unchecked, it allows the server to continue running (multiple clients can test at the same time).");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Check_SendStop)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TextField_Timeout)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TextField_TimeBetweenPackets)
                                    .addComponent(jLabel8)
                                    .addComponent(TextField_NumberOfSentPackets))
                                .addComponent(jLabel9)))
                        .addGap(18, 18, 18)
                        .addComponent(Check_WaitToConfirm)))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextField_TimeBetweenPackets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextField_NumberOfSentPackets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextField_Timeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Check_WaitToConfirm))
                .addGap(18, 18, 18)
                .addComponent(Check_SendStop)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Advanced Controls", jPanel3);

        Table_PacketInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Packet Num", "Time Sent", "Time Recieved", "Time Dif"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Table_PacketInfo);
        if (Table_PacketInfo.getColumnModel().getColumnCount() > 0) {
            Table_PacketInfo.getColumnModel().getColumn(0).setResizable(false);
            Table_PacketInfo.getColumnModel().getColumn(1).setResizable(false);
            Table_PacketInfo.getColumnModel().getColumn(2).setResizable(false);
            Table_PacketInfo.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Packet Info", jPanel2);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Throughput");
        jLabel10.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Latency (ms)");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Errors");
        jLabel12.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setText("Jitter");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("Out-of-Order Amount");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Dropped Packets");

        TextField_Throughput.setBackground(new java.awt.Color(240, 240, 240));
        TextField_Throughput.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_Throughput.setText("--");
        TextField_Throughput.setToolTipText("The program does not calculate this.");
        TextField_Throughput.setEnabled(false);
        TextField_Throughput.setOpaque(false);

        TextField_Latency.setBackground(new java.awt.Color(240, 240, 240));
        TextField_Latency.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_Latency.setEnabled(false);
        TextField_Latency.setOpaque(false);

        TextField_Errors.setBackground(new java.awt.Color(240, 240, 240));
        TextField_Errors.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_Errors.setText("--");
        TextField_Errors.setToolTipText("The program does not calculate this.");
        TextField_Errors.setEnabled(false);
        TextField_Errors.setOpaque(false);

        TextField_Jitter.setBackground(new java.awt.Color(240, 240, 240));
        TextField_Jitter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_Jitter.setEnabled(false);
        TextField_Jitter.setOpaque(false);

        TextField_OOOAmount.setBackground(new java.awt.Color(240, 240, 240));
        TextField_OOOAmount.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_OOOAmount.setEnabled(false);
        TextField_OOOAmount.setOpaque(false);

        TextField_DroppedPackets.setBackground(new java.awt.Color(240, 240, 240));
        TextField_DroppedPackets.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_DroppedPackets.setEnabled(false);
        TextField_DroppedPackets.setOpaque(false);

        Button_Calculate.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        Button_Calculate.setText("Calculate");
        Button_Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_CalculateActionPerformed(evt);
            }
        });

        TextField_PercentDropped.setEditable(false);
        TextField_PercentDropped.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TextField_PercentDropped.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Button_Calculate, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addComponent(jLabel12)
                        .addComponent(TextField_Latency)
                        .addComponent(TextField_Errors, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TextField_Throughput, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(TextField_DroppedPackets, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TextField_PercentDropped, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(TextField_OOOAmount)
                    .addComponent(TextField_Jitter))
                .addGap(27, 27, 27))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Button_Calculate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextField_Throughput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextField_Jitter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextField_Latency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextField_OOOAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TextField_Errors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextField_DroppedPackets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextField_PercentDropped, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33))
        );

        jTabbedPane1.addTab("Analytics", jPanel4);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Label_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Label_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_SendDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_SendDataActionPerformed
        
        for(int i = model.getRowCount() - 1; i >= 0;i--)
        {
            model.removeRow(i);
        }
        
        numberOfSentPackets = Integer.parseInt(TextField_NumberOfSentPackets.getText());
        TimeBetweenPackets = Integer.parseInt(TextField_TimeBetweenPackets.getText());
        
        
        
        int packetNum = 0;
        long timeSent = 0;
        long timeRet = 0;
        int timeDif = 0;
        
        try
        {
            // TODO add your handling code here:

            int serverPort = Integer.parseInt(TextField_ServerPort.getText());
            InetAddress serverHost = InetAddress.getByName(TextField_ServerIP.getText());

            DatagramSocket socket = new DatagramSocket(serverPort-1);
            
            socket.setSoTimeout(Integer.parseInt(TextField_Timeout.getText()));
            
            TextArea_Replies.setText("");
            TextArea_Replies.append("Sending Packets to: "+serverHost.getHostAddress()+" : "+serverPort+"\n");
            
            for(int i = 0; i < numberOfSentPackets; i++)
            {
                packetNum = i;
                timeSent = Calendar.getInstance().getTimeInMillis();

                DatagramPacket se = ping(serverHost, serverPort, i, timeSent);
                socket.send(se);
                
                DatagramPacket serverReply = new DatagramPacket(new byte[1024], 1024);
                try
                {
                    if(Check_WaitToConfirm.isSelected())
                        socket.receive(serverReply);
                        TextArea_Replies.append(printData(serverReply));
                        timeRet = Calendar.getInstance().getTimeInMillis();                  
                }
                catch (SocketTimeoutException e)
                {
                        TextArea_Replies.append("Packet Lost\n");
                        timeRet = 0;      
                } 
                catch (Exception ex) 
                {
                    Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
                    timeRet = 0;
                }
                
                if(timeRet != 0)
                {
                    timeDif = (int) (timeRet-timeSent);
                    model.addRow(new Object[]{packetNum,timeSent,timeRet,timeDif});
                }
                else
                {
                    model.addRow(new Object[]{packetNum,timeSent,timeRet,"NeverRet"});
                }
                TextArea_Replies.update(TextArea_Replies.getGraphics());
                Thread.sleep(TimeBetweenPackets);
            }
            if(Check_SendStop.isSelected())
                socket.send(sendStopMessage(serverHost,serverPort));

            socket.close();
        }
        catch (SocketException | InterruptedException ex)
        {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex)
        {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Button_SendDataActionPerformed

    private void TextField_ServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField_ServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField_ServerPortActionPerformed

    private void TextField_ServerIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField_ServerIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField_ServerIPActionPerformed

    private void TextField_NumberOfSentPacketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField_NumberOfSentPacketsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField_NumberOfSentPacketsActionPerformed

    private void Button_CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_CalculateActionPerformed
        // TODO add your handling code here:
        
        //calculating latency
        int totalDelay = 0;
        int totalCount = 0;
        double averageDelay = 0;
        int droppedTotal = 0;
      
        
        for(int row = 0; row < model.getRowCount();row++)
        {

            if((long)model.getValueAt(row,2) == 0)
            {
                droppedTotal++;
            }
            else
            {
                totalCount++;
                totalDelay+=(int)model.getValueAt(row,3);
            }
        }
        if(totalCount != 0)
        {
            averageDelay = (double)totalDelay/(double)totalCount;
            BigDecimal aD = new BigDecimal(averageDelay);
            aD.setScale(2, RoundingMode.DOWN);
            TextField_Latency.setText(Double.toString(aD.doubleValue()));
            if(averageDelay == 0)
                TextField_Latency.setText("0");
            
            TextField_OOOAmount.setText("NA");
            TextField_Jitter.setText("NA");
        }
        else
        {
            TextField_Latency.setText("No Packets");
            TextField_OOOAmount.setText("No Packets");
            TextField_Jitter.setText("No Packets");
        }
        
        TextField_DroppedPackets.setText(Integer.toString(droppedTotal)+"/"+Integer.toString(numberOfSentPackets));
        if((double)droppedTotal/(double)numberOfSentPackets == 0)
            TextField_PercentDropped.setText("0");
        else if((double)droppedTotal/(double)numberOfSentPackets <= .01)
            TextField_PercentDropped.setText("<1");
        else
        {
            double percent = 100*((double)droppedTotal/(double)numberOfSentPackets);
            BigDecimal per = new BigDecimal(percent);
            per.setScale(2, RoundingMode.UP);
            TextField_PercentDropped.setText(Double.toString(per.doubleValue()));          
        }
               
        
        if(model.getRowCount()==0)
        {
            TextField_Latency.setText("Run Test");
            TextField_OOOAmount.setText("Run Test");
            TextField_Jitter.setText("Run Test");
            TextField_DroppedPackets.setText("Run Test");
            TextField_PercentDropped.setText("Run Test");
        }
    }//GEN-LAST:event_Button_CalculateActionPerformed

    private void Check_WaitToConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Check_WaitToConfirmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Check_WaitToConfirmActionPerformed

    private static DatagramPacket ping(InetAddress serverHost, int serverPort, int i, long dateNow)
    {
             String msg = "PING ";
             msg += i + " ";
             msg += dateNow;
             msg += "\r\n";
             byte[] buf = msg.getBytes();
             return new DatagramPacket(buf, buf.length, serverHost, serverPort);
    }
    
    private static DatagramPacket sendStopMessage(InetAddress serverHost, int serverPort)
    {
        String msg = "STOP";
        byte[] buf = msg.getBytes();
        return new DatagramPacket(buf,buf.length,serverHost,serverPort);
    }

    private static String printData(DatagramPacket request) throws Exception 
    { 
	// Obtain references to the packet's array of bytes. 
	byte[] buf = request.getData(); 
	
	// Wrap the bytes in a byte array input stream, 
	// so that you can read the data as a stream of bytes. 
	ByteArrayInputStream bais = new ByteArrayInputStream(buf); 
	
	// Wrap the byte array output stream in an input stream reader, 
	// so you can read the data as a stream of characters. 
	InputStreamReader isr = new InputStreamReader(bais); 
	
	// Wrap the input stream reader in a bufferred reader, 
	// so you can read the character data a line at a time. 
	// (A line is a sequence of chars terminated by any combination of \r and \n.) 
	BufferedReader br = new BufferedReader(isr); 
	
	// The message data is contained in a single line, so read this line. 
	String line = br.readLine(); 
	
	// Print host address and data received from it. 
	return (line + "\n"); 

    } 
    
    String ipAddress = "";
    int numberOfSentPackets = 5;
    int TimeBetweenPackets;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Calculate;
    private javax.swing.JButton Button_SendData;
    private javax.swing.JCheckBox Check_SendStop;
    private javax.swing.JCheckBox Check_WaitToConfirm;
    private javax.swing.JComboBox Combo_ClientProtocol;
    private javax.swing.JLabel Label_IPAddress;
    private javax.swing.JTable Table_PacketInfo;
    private javax.swing.JTextArea TextArea_Replies;
    private javax.swing.JTextField TextField_DroppedPackets;
    private javax.swing.JTextField TextField_Errors;
    private javax.swing.JTextField TextField_Jitter;
    private javax.swing.JTextField TextField_Latency;
    private javax.swing.JTextField TextField_NumberOfSentPackets;
    private javax.swing.JTextField TextField_OOOAmount;
    private javax.swing.JTextField TextField_PercentDropped;
    private javax.swing.JTextField TextField_ServerIP;
    private javax.swing.JTextField TextField_ServerPort;
    private javax.swing.JTextField TextField_Throughput;
    private javax.swing.JTextField TextField_TimeBetweenPackets;
    private javax.swing.JTextField TextField_Timeout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
